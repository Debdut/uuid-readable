{"version":3,"file":"index.umd.js","sources":["../data/name/index.ts","../data/grammer/index.ts","../data/animal/index.ts","../src/util.ts","../src/schema.ts","../src/readable.ts","../src/low-entropy.ts","../src/index.ts"],"sourcesContent":["import * as First from \"./first.json\";\nimport * as Last from \"./last.json\";\nimport * as Middle from \"./middle.json\";\n\nexport default { First, Last, Middle };\n","import * as Adjective from \"./adjective.json\";\nimport * as Adverb from \"./adverb.json\";\nimport * as Verb from \"./verb.json\";\nimport * as PersonalNoun from \"./personal-noun.json\";\n\nexport default { Adjective, Adverb, Verb, PersonalNoun };\n","import * as Noun from \"./noun.json\";\nimport * as Adjective from \"./adjective.json\";\nimport * as Verb from \"./verb.json\";\n\nexport default { Noun, Adjective, Verb };\n","const caps = (w: string) => w.charAt(0).toUpperCase() + w.slice(1);\nconst deCaps = (w: string) => w.toLowerCase();\n\nconst toBits = (byte: number, length = 8) => {\n  const bits = [];\n  for (let i = 0; i < length; i++) {\n    bits.unshift(byte % 2);\n    byte = byte >> 1;\n  }\n\n  return bits;\n};\n\nconst toByte = (bits: number[]) => {\n  let byte = 0;\n  for (let i = 0; i < bits.length; i++) {\n    const bit = bits[i] as number;\n    byte = 2 * byte + bit;\n  }\n  return byte;\n};\n\nexport default { caps, deCaps, toBits, toByte };\n","import Name from \"../data/name\";\nimport Grammer from \"../data/grammer\";\nimport Place from \"../data/place\";\nimport Animal from \"../data/animal\";\n\nimport _ from \"./util.js\";\n\nclass Element<T> {\n  length: number;\n  generate: (a: number) => T;\n  inv: (a: T) => number;\n  bit: number;\n  constructor(\n    length: number,\n    generate: (a: number) => T,\n    inv: (a: T) => number\n  ) {\n    (this.length = length), (this.generate = generate);\n    this.inv = inv;\n\n    this.bit = Math.trunc(Math.log2(this.length));\n  }\n\n  inverse(val: T) {\n    const byte = this.inv(val);\n    if (byte === -1) {\n      return -1;\n    }\n\n    return _.toBits(byte, this.bit);\n  }\n}\n\nconst Count = (n: number) =>\n  new Element<number>(\n    n,\n    (i: number) => i + 2,\n    (i: number) => (i > 1 && i < 34 ? i - 2 : -1)\n  );\n\nconst List = (list: string[]) =>\n  new Element<string>(\n    list.length,\n    (i: number) => list[i % list.length] as string,\n    (word: string) => list.indexOf(word)\n  );\n\nconst Full = [\n  List(Name.First),\n  List(Name.Middle),\n  List(Name.Last),\n  List(Grammer.PersonalNoun),\n  List(Place),\n  List(Grammer.Verb),\n  List(Name.First),\n  List(Name.Middle),\n  List(Name.Last),\n  Count(32),\n  List(Animal.Adjective),\n  List(Animal.Noun),\n];\n\nconst LowEntropy = [\n  Count(64),\n  List(Animal.Adjective),\n  List(Animal.Noun),\n  List(Grammer.Adverb),\n  List(Animal.Verb),\n];\n\nexport default { Full, LowEntropy };\n","import Schema from \"./schema\";\nimport _ from \"./util\";\n\nconst partition = (parts: number[], bytes: number[]) => {\n  let bits = Array.from(bytes)\n    .map((byte) => _.toBits(byte))\n    .reduce((a, c) => a.concat(c), []);\n  const _bytes = [];\n\n  for (let i = 0; i < parts.length; i++) {\n    const part = parts[i] as number;\n    const temp = bits.splice(part);\n    const part_bits = bits;\n    bits = temp;\n    const byte = _.toByte(part_bits);\n    _bytes.push(byte);\n  }\n\n  return _bytes;\n};\n\nconst dePartition = (bitsList: number[][]) => {\n  const bits = bitsList.reduce((a, c) => a.concat(c), []);\n\n  const bytes = [];\n\n  for (let i = 0; i < 16; i++) {\n    const part = bits.slice(8 * i, 8 * (i + 1));\n    const byte = _.toByte(part);\n    bytes.push(byte);\n  }\n\n  return bytes;\n};\n\nconst sentence = (w: (string | number | undefined)[]) =>\n  `${w[0]} ${w[1]} ${w[2]} the ${_.caps(`${w[3]}`)} of ${w[4]} ${w[5]} ${\n    w[6]\n  } ${w[7]} ${w[8]} and ${w[9]} ${w[10]} ${w[11]}`;\nconst deSentence = (s: string) => {\n  let rest = s.split(\" the \") as string[];\n\n  const p1 = (rest[0] as string).trim().split(\" \");\n\n  rest = (rest[1] as string).split(\" of \");\n  const p2 = (rest[0] as string).trim().split(\" \");\n\n  rest = (rest[1] as string).split(\" and \");\n  const p3 = (rest[0] as string).trim().split(\" \");\n  const p4 = (rest[1] as string).trim().split(\" \");\n\n  const w = [\n    p1[0],\n    p1[1],\n    p1[2],\n    _.deCaps(p2[0] || \"\"),\n    p3[0],\n    p3[1],\n    p3[2],\n    p3[3],\n    p3[4],\n    parseInt(p4[0] || \"\", 10),\n    p4[1],\n    p4[2],\n  ];\n\n  return w;\n};\n\nconst valid = () => {\n  return Schema.Full.map((s) => s.bit).reduce((a, c) => a + c) === 128;\n};\n\n// Parts\n// [\n//   12, 11, 14, 13, 13,\n//   10, 12, 11, 14,  5,\n//    6,  7\n// ]\n\nconst generate = (uuid: number[]) => {\n  const parts = Schema.Full.map((s) => s.bit);\n  const words = partition(parts, uuid).map((b, i) =>\n    Schema.Full[i]?.generate(b)\n  );\n  return sentence(words);\n};\n\nconst inverse = (readable: string) => {\n  const bits = deSentence(readable).map((w, i) =>\n    Schema.Full[i]?.inverse(w as never)\n  );\n\n  // Check -1 in words\n  if (bits.indexOf(-1) >= 0) {\n    throw new Error(\"Not A Valid UUID Readable\");\n  }\n\n  // dePartition\n  const bytes = dePartition(bits as number[][]);\n\n  return bytes;\n};\n\nexport default { generate, inverse, valid };\n","import Schema from \"./schema.js\";\nimport _ from \"./util.js\";\n\nconst partition = (parts: number[], bytes: number[]) => {\n  let bits = Array.from(bytes)\n    .map((byte) => _.toBits(byte))\n    .map((bits) => bits.slice(0, 2))\n    .reduce((a, c) => a.concat(c), []);\n  const _bytes = [];\n\n  for (let i = 0; i < parts.length; i++) {\n    const part = parts[i] as number;\n    const temp = bits.splice(part);\n    const part_bits = bits;\n    bits = temp;\n    const byte = _.toByte(part_bits);\n    _bytes.push(byte);\n  }\n\n  return _bytes;\n};\n\nconst sentence = (w: (string | number | undefined)[]) =>\n  `${w[0]} ${w[1]} ${w[2]} ${w[3]} ${w[4]}`;\nconst deSentence = (s: string) => {\n  const w = s.trim().split(\" \");\n\n  return [parseInt(w[0] as string, 10), w[1], w[2], w[3], w[4]];\n};\n\nconst generate = (uuid: number[]) => {\n  const parts = Schema.LowEntropy.map((s) => s.bit);\n\n  const words = partition(parts, uuid).map((b, i) =>\n    Schema.LowEntropy[i]?.generate(b)\n  );\n\n  return sentence(words);\n};\n\nconst check = (readable: string, uuid: number[]) => {\n  const uuidBits = Array.from(uuid)\n    .map((byte) => _.toBits(byte))\n    .map((bits) => bits.slice(0, 2))\n    .reduce((a, c) => a.concat(c), []);\n\n  const readableBits = deSentence(readable).map((w, i) =>\n    Schema.LowEntropy[i]?.inverse(w as never)\n  );\n\n  if (readableBits.indexOf(-1) >= 0) {\n    return false;\n  }\n\n  const readableBitsReduced = readableBits.reduce(\n    (a, c) => (a as number[]).concat(c as number[]),\n    []\n  );\n\n  for (let i = 0; i < uuidBits.length; i++) {\n    // @ts-ignore\n    if (uuidBits[i] !== readableBitsReduced[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport default { generate, check };\n","import * as UUID from \"uuid\";\nimport Readable from \"./readable\";\nimport LowEntropy from \"./low-entropy\";\n\n// Generate a uuid readable.\nexport const generate = (uuid: string) => {\n  if (!uuid) {\n    const _uuid: number[] = [];\n    UUID.v4({}, _uuid);\n\n    return Readable.generate(_uuid);\n  }\n\n  return Readable.generate(UUID.parse(uuid) as number[]);\n};\n\n// Get uuid back from readable.\nexport const inverse = (readable: string) => {\n  return UUID.stringify(Readable.inverse(readable));\n};\n\n// Create a low entropy 32 bit uuid readable.\nexport const short = (uuid: string) => {\n  return LowEntropy.generate(UUID.parse(uuid) as number[]);\n};\n\n// Check if the low entropy uuid is generated from the given uuid.\nexport const check = (readable: string, uuid: string) => {\n  return LowEntropy.check(readable, UUID.parse(uuid) as number[]);\n};\n"],"names":["Adjective","Verb","LowEntropy","partition","sentence","deSentence","generate","inverse","check","UUID"],"mappings":"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"}